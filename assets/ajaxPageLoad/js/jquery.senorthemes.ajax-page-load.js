// Generated by CoffeeScript 1.6.2
/*
	AjaxPageLoad.js 0.9

	Created by Carlos Carrasco
	Released under http://unlicense.org/
*/


(function() {
  var $;

  $ = jQuery;

  $.fn.extend({
    ajaxPageLoad: function(options) {
      var $anchorsWrapper, $card, $loaderCard, $navItems, $targetCard, $wrap, card, getNavItem, goTo, loadPage, loaderCard, log, navDef, removePreloader, settings, showPreloader, targetAppliesToAjaxLoad, targetCard, wrap;

      settings = {
        anchorsWrapper: null,
        animation: false,
        animationSpeed: 500,
        activeNavItem: $('nav .active a'),
        prevPageItem: null,
        currentPageItem: null,
        nextPageItem: null,
        slideDirection: 'right',
        click: null,
        animationOverride: false,
        printOverride: null,
        complete: null,
        debug: false
      };
      settings = $.extend(settings, options);
      $navItems = $(this);
      wrap = settings.target;
      $wrap = $(settings.target);
      $anchorsWrapper = $(settings.anchorsWrapper);
      $wrap.wrapInner('<div class="card-wrap" />');
      $wrap.addClass('card-container');
      card = targetCard = loaderCard = '.card-wrap';
      $card = $targetCard = $loaderCard = $('.card-wrap');
      navDef = [];
      log = function(msg) {
        if (settings.debug) {
          return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
        }
      };
      log(this);
      showPreloader = function() {
        $loaderCard.addClass('loading');
        return $loaderCard.html('<div class="loader">\
<div class="duo duo1">\
  <div class="dot dot-a"></div>\
  <div class="dot dot-b"></div>\
</div>\
<div class="duo duo2">\
  <div class="dot dot-a"></div>\
  <div class="dot dot-b"></div>\
</div>\
</div>');
      };
      removePreloader = function() {
        $loaderCard.html('');
        $loaderCard.removeAttr('style');
        return $loaderCard.removeClass('loading');
      };
      loadPage = function(navItem) {
        var pageurl;

        pageurl = navItem.href;
        return $.ajax({
          url: pageurl + "?ajax=true",
          success: function(data) {
            if ($.isFunction(settings.printOverride)) {
              settings.printOverride.call(this, settings.currentPageItem, $targetCard);
            } else {
              removePreloader();
              $targetCard.hide().html($(data).find('#content-wrapper').parent().html()).fadeIn(1000);
            }
            if ($.isFunction(settings.complete)) {
              return settings.complete.call(this, settings.currentPageItem, $targetCard, data);
            }
          }
        });
      };
      targetAppliesToAjaxLoad = function(navItem) {
        if (settings.currentPageItem == null) {
          settings.currentPageItem = {
            pathName: null
          };
        }
        if (settings.currentPageItem.pathname === navItem.pathname) {
          return false;
        } else {
          settings.slideDirection = (settings.currentPageItem.index < navItem.index ? "right" : "left");
          return true;
        }
      };
      getNavItem = function(i, el) {
        var hash, host, navItem, parts, pathArray, pathName, pathNameArray, protocol, url, x;

        x = window.location;
        url = $(el).attr('href');
        if (/^(?:[a-z]+:)?\/\//i.test(url)) {
          url = $(this).prop('href');
          pathArray = url.split('/');
          protocol = pathArray[0];
          host = pathArray[2];
          pathNameArray = url.split(host);
          pathNameArray = pathNameArray[1].split("#");
          pathName = pathNameArray[0].replace(/^\//, '').replace(/\/$/, '');
          hash = (pathNameArray[1] != null ? pathNameArray[1] : null);
          navItem = {
            index: i,
            id: $(this).attr('id'),
            hostname: host,
            protocol: protocol,
            pathname: pathName,
            hash: hash,
            href: protocol + '//' + host + '/' + pathName
          };
        } else {
          parts = url.split("#");
          hash = (parts[1] != null ? parts[1] : null);
          navItem = {
            index: i,
            id: $(this).attr('id'),
            hostname: x.hostname,
            protocol: x.protocol,
            pathname: parts[0],
            hash: hash,
            href: x.protocol + '//' + x.hostname + '/' + parts[0]
          };
        }
        return navItem;
      };
      goTo = function() {
        var wrapperWidth;

        wrapperWidth = $wrap.width();
        if ($.isFunction(settings.animationOverride)) {
          settings.animation = settings.animationOverride.call(this);
        }
        if (settings.animation) {
          $wrap.append('<div class="card-wrap loading"></div>');
          $card = $wrap.find('.card-wrap:first');
          $targetCard = $loaderCard = $wrap.find('.card-wrap:last');
          showPreloader();
          $card.addClass((settings.slideDirection === "right" ? 'slide-right' : 'slide-left'));
          return setTimeout((function() {
            $card.remove();
            return loadPage(settings.nextPageItem);
          }), 400);
        } else {
          showPreloader();
          return loadPage(settings.nextPageItem);
        }
      };
      return this.each(function(i, el) {
        if ($(el).parent().hasClass('active')) {
          settings.currentPageItem = getNavItem(i, el);
        }
        return $(el).on("click", function(ev) {
          if ($.isFunction(settings.click)) {
            settings.click.call(el, settings.currentPageItem);
          }
          settings.nextPageItem = getNavItem(i, el);
          if (targetAppliesToAjaxLoad(settings.nextPageItem)) {
            ev.preventDefault();
            ev.stopPropagation();
            goTo();
          }
          settings.prevPageItem = settings.currentPageItem;
          settings.currentPageItem = settings.nextPageItem;
          if (settings.currentPageItem.href !== window.location) {
            return window.history.pushState({
              path: settings.currentPageItem.href
            }, "", settings.currentPageItem.href);
          }
        });
      });
    }
  });

}).call(this);
